一、Groupy机制：
    split -------- Apply --------- combine
    pdObj根据分组键沿特定轴分离到各个组中，分别进行操作，然后再聚合
        在分离过程中可以认为此时的pd的value具有了矢量性
        结果的形式取决于对于数据的操作（还原为标量）
        
    对SeriesObj:
        SeriesObj.groupby(by,axis,level,as_index,sort,group_keys,squeeze,observed, dropna)
            by:                 字典，映射，series对象，数组，标签，列表。
                                如果by是一个函数，则对象索引的每个值调用它；
                                如果传递了一个字典或者series对象，则使用该字典或者series对象来确定组。      见下
                                如果传递了数组ndarray，则按传入的数组来确定这些组。                        见下
            axis:               axis=1表示行；axis=0表示列，默认值为0,表示分解和合并的方向
            level:              表示索引层级，默认为无
            as_index:           布尔类型，默认为True,返回组标签为索引的对象
            sort:               对组进行排序，布尔类型，默认为True
            group_keys:         布尔类型，默认为True,调用apply函数时，将分组键添加到索引以标识片段
            squeeze:            布尔类型，默认为False,如果可能，减少返回类型的维度，否则返回一致类型
            observed:           是否显示没有的量以保证表格同样，默认False
            dropna:             是否删除Nan值，默认True
        DataFrameObj.groupby(参数同上)
            by:                 除了上述还可以通过columns的字符串实现，
                                    此时返回的是Series对象
                                还可以使用columnsstr的列表/数组，实现多重标准分解,
                                    此时返回的是DataFrame对象
        groupby.size()
            返回每个分组的size组成的Series
    1.遍历各分组：
        用for循环
        for name(s), group in df.groupby(...):
            其中name    可以是标量(单个标准)或者是一个元组(多种标准)
            group       是一个DataFarame(对于多维),Series(对应一维)
        对于groupby对象可以使用类似字典的方式：
            类似dict(list(groupby('key1')))
    2.选择一列或者所有列的子集：
        对于groupby对象可以使用类似DataFrame的方式选择：
            
            DataFrameObj.groupby('key')['data1']
                或者df['data1'].groupby(df['key1'])
                    返回by和Series组成的groupby

            DataFrameObj.group('key1')[['data1']]
                或者df[['data1]].groupby(df['key1'])
                    返回by和DataFrame组成的groupby
    3.使用字典或者Series分组：
        当by传入字典或者是Series时：
            字典的键集必须包含对应axies的全体（可以更多）
            在此过程中，将对应的index/column转换为value组成的数组，然后进行相应的操作
            也就是说这个过程中自变量是索引值，而dict只是分类方式
                PS：对于多层索引，自变量是对应的tuple!!
            Series同dict，Index对应key,value对应value
    4.使用函数分组：
        类似前面的字典/Series分组，自变量是索引值，返回值组成by标准
        函数、字典、Series可以混合使用，构建多层次的分组标准
    5.使用索引层级分组：
        level对象可以选择多层索引中的分组对应的层
        如果这个时候没有设置by，则直接该索引层的索引进行分组
                      设置之后，则将其作为一般的一维索引处理
二、数据聚合：
    对于groupbyObj，有聚合方法可以实在现分组内部的数据聚合，实现外部的标量化

    自带的优化groupby方法：（更快）
        如之前提到的sum,count,mean,std,var,first,last,prod,median等
        本质上都使用了聚合方法
        quantile等Series方法也可以通过选取Series切片之后再使用
    
    还可以自定义聚合方法：
        通过pdObj.agg(arg,*args,**kwargs)
                            实现，传递的参数可以是函数,也可以是已经内定的字符串如mean,max,min,sum等（当然字典也可以，不过考虑变量很麻烦）
                            还可以是一个二元tuple，第一个表示新的列的name，第二个是函数
                            函数的传入变量中第一个变量是  分组内部pdObj中的不同指标的数据（如一列中的数据）
                                之后的变量可以显示的添加再*arg中
                            返回对应返回(标量)值（分组间contact连接）

    
    应用多函数：
        arg 可以设置为列表，此时会对所有的groupby中的pdObj部分进行多个函数的应用，返回多个列的DataFrame
            可以设置为字典，此时会对pdObj部分每一列指定性的处理

三、应用：通用拆分-应用-联合：
    groupbyObj.apply(fun)
        将fun应用于分组中，自变量是分组中的pdObj，而不是pdObj中的数据
            每个分组返回一个返回值，并将返回值contact起来
        在apply中加入显示参数，即可以向fun传入参数
        
    对describe()方法：
        相当于groupbyObj.apply(lambda x:x.describe())
    
    压缩分组键：
        as_index:       是否将分组键作为index                   默认True
        group_keys:     是否保留分组键(包括index和数据中的列)    默认True
    
    分位数和桶分析：
        听过cut和qcut可以将数据进行桶分析和分位分析
            pd.cut和pd.qcut见前
            对于Categorical对象可以利用groupby处理，计算统计值
            qcut类似

四、数据透视图和交叉表：
    透视图在之前出现过，主要是在重组中
    对于pivot方法，会有不能有重复值的限制（多个数值的index和column相同会报错），
    但是使用pivot_table方法会自动地将这些值进行聚合，得到标量值

    pivot_table(values,index,columns,aggfunc,fill_value,margins,dropna,margins_name,observed)
        index,value,columns同pivot方法
        aggfun              设定聚合函数（默认是均值）
        fill_value          填充透视形成的空值
        margins             添加ALL列
        dropna              删除对应的行
        margins_name        命名ALL列
        obvered             是否显示没有的量以保证表格同样，默认False

    交叉表是透视表的特例，类似于aggfun='count'
        PS：crosstab是顶层函数，传参数时需要传数组



    